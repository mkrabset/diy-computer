/usr/local/java/jdk/bin/java -javaagent:/usr/local/java/idea-IU-183.4886.37/lib/idea_rt.jar=33949:/usr/local/java/idea-IU-183.4886.37/bin -Dfile.encoding=UTF-8 -classpath /usr/local/java/jdk/jre/lib/charsets.jar:/usr/local/java/jdk/jre/lib/deploy.jar:/usr/local/java/jdk/jre/lib/ext/cldrdata.jar:/usr/local/java/jdk/jre/lib/ext/dnsns.jar:/usr/local/java/jdk/jre/lib/ext/jaccess.jar:/usr/local/java/jdk/jre/lib/ext/jfxrt.jar:/usr/local/java/jdk/jre/lib/ext/localedata.jar:/usr/local/java/jdk/jre/lib/ext/nashorn.jar:/usr/local/java/jdk/jre/lib/ext/sunec.jar:/usr/local/java/jdk/jre/lib/ext/sunjce_provider.jar:/usr/local/java/jdk/jre/lib/ext/sunpkcs11.jar:/usr/local/java/jdk/jre/lib/ext/zipfs.jar:/usr/local/java/jdk/jre/lib/javaws.jar:/usr/local/java/jdk/jre/lib/jce.jar:/usr/local/java/jdk/jre/lib/jfr.jar:/usr/local/java/jdk/jre/lib/jfxswt.jar:/usr/local/java/jdk/jre/lib/jsse.jar:/usr/local/java/jdk/jre/lib/management-agent.jar:/usr/local/java/jdk/jre/lib/plugin.jar:/usr/local/java/jdk/jre/lib/resources.jar:/usr/local/java/jdk/jre/lib/rt.jar:/home/ivark/projects/diy-computer/server/out/production/classes:/home/ivark/projects/diy-computer/server/out/production/resources:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-web/1.5.9.RELEASE/bda9733d5e6ba6d1a97deead1738713dc0631b3e/spring-boot-starter-web-1.5.9.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-jersey/1.5.9.RELEASE/f7be1e712bee3e06e8b28fed4e7a844a08b9efab/spring-boot-starter-jersey-1.5.9.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.scream3r/jssc/2.8.0/7e8d93052a8743a7937a6d46854057ac1ce876c1/jssc-2.8.0.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.datatype/jackson-datatype-jsr310/2.8.3/cfc4a64ecdb762d39c5d24823ed079df261562c4/jackson-datatype-jsr310-2.8.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-kotlin/2.8.3/e90081bf64336ff0bdf2600131ec7aa65c5f028c/jackson-module-kotlin-2.8.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-json-jackson/2.25.1/19d1e4276eb7b6386640c344d9e5c01eba7eae5d/jersey-media-json-jackson-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.8.7/3d6ac461d0b478c85ca380468f675c7217295591/jackson-jaxrs-json-provider-2.8.7.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.8.7/814af809cd9fca86e9d89c17080bb0446b06569d/jackson-jaxrs-base-2.8.7.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.8.7/4d7e1de1694d9f95eada828dabf43121b3afc435/jackson-module-jaxb-annotations-2.8.7.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.8.3/cea3788c72271d45676ce32c0665991674b24cc5/jackson-databind-2.8.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.8.3/5e1dc37c96308851c3ff609c250dc849c4b12022/jackson-core-2.8.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-validation/1.5.2.RELEASE/2eb3cf38e0ab2611f305626ea5dc96619ddadc1d/spring-boot-starter-validation-1.5.2.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter/1.5.2.RELEASE/c72938c86ed3beadb385f29bc2954c8ca3aa47ab/spring-boot-starter-1.5.2.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-tomcat/1.5.2.RELEASE/354320ef371fc4fc126d1bb8564cd73085a48823/spring-boot-starter-tomcat-1.5.2.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.ext/jersey-bean-validation/2.25.1/1971927d79cad0ad2b5a3bfda24967748a2023d/jersey-bean-validation-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.ext/jersey-spring3/2.25.1/a31bfcd2fcae5beb979d3f41079b6f4020d6fbc9/jersey-spring3-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2/2.5.0-b32/c3accae585955e49c771d464899e906ecc9ffb4/hk2-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/config-types/2.5.0-b32/686bbe7f80b1b879d64c06bc6606c97721a795f2/config-types-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-config/2.5.0-b32/dce05ac4225dbc0c1c382ad02e3b5bee51f0168a/hk2-config-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.hibernate/hibernate-validator/5.3.4.Final/2f6c8c0b646afe18e3ad205726729d3c4a85fe2e/hibernate-validator-5.3.4.Final.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-webmvc/4.3.7.RELEASE/d25b11a605589f176e3ecf1dcae62a991a18b377/spring-webmvc-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-web/4.3.7.RELEASE/7b69fc68cdb74c1c92f72905af6995696fcb56aa/spring-web-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.containers/jersey-container-servlet/2.25.1/cf5f7a76fcea38158b890ab7a0142d4db709a882/jersey-container-servlet-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.containers/jersey-container-servlet-core/2.25.1/400e30bb035a0cdf3c554530224141ce659a0d1e/jersey-container-servlet-core-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-server/2.25.1/276e2ee0fd1cdabf99357fce560c5baab675b1a2/jersey-server-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.8.0/45b426f7796b741035581a176744d91090e2e6fb/jackson-annotations-2.8.0.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-reflect/1.0.3/ed9cbaeb8dccd2027348185044012aac145a5c61/kotlin-reflect-1.0.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-autoconfigure/1.5.2.RELEASE/8a9b8c747bc2c86eefde10330cb2984541bcb9d1/spring-boot-autoconfigure-1.5.2.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot/1.5.2.RELEASE/46bb5d8c9ab5d3ef9e158ca5906ee7d3569befc1/spring-boot-1.5.2.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework.boot/spring-boot-starter-logging/1.5.2.RELEASE/32210889e1f9bb09ac134b9f43a117ed62f0bed2/spring-boot-starter-logging-1.5.2.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/spring-bridge/2.5.0-b32/f38ecef23edc769942a95c062efd63541044de42/spring-bridge-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-context/4.3.7.RELEASE/34b66b0b7910122ef95ba4fff6da9238ef80a5de/spring-context-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-aop/4.3.7.RELEASE/3f243d685e4a8a78a0c291445c6d85560ec4d339/spring-aop-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-beans/4.3.7.RELEASE/2de9f59f3202965438f3a02057d6ad8274636044/spring-beans-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-expression/4.3.7.RELEASE/5257b6486e43d8c05674323fea5b415d4da72f38/spring-expression-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.springframework/spring-core/4.3.7.RELEASE/54fa2db94cc7222edc90ec71354e47cd1dc07f7b/spring-core-4.3.7.RELEASE.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.yaml/snakeyaml/1.17/7a27ea250c5130b2922b86dea63cbb1cc10a660c/snakeyaml-1.17.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-websocket/8.5.11/dfa65e7857d46630761c0571758a56f7cbd1e9ba/tomcat-embed-websocket-8.5.11.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-core/8.5.11/72761f51fc7cef3ee19d4aafc7adc605df9f611f/tomcat-embed-core-8.5.11.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.apache.tomcat.embed/tomcat-embed-el/8.5.11/60253815b897166903bf5ec41219c5bb15333a69/tomcat-embed-el-8.5.11.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/javax.validation/validation-api/1.1.0.Final/8613ae82954779d518631e05daa73a6a954817d5/validation-api-1.1.0.Final.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.jboss.logging/jboss-logging/3.3.0.Final/3616bb87707910296e2c195dc016287080bba5af/jboss-logging-3.3.0.Final.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/com.fasterxml/classmate/1.3.3/864c8e370a691e343210cc7c532fc198cee460d8/classmate-1.3.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-client/2.25.1/4d563b1f93352ee9fad597e9e1daf2c6159993c6/jersey-client-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-jaxb/2.25.1/d7da0beeed5614a3bfd882662faec602699e24b/jersey-media-jaxb-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.core/jersey-common/2.25.1/2438ce68d4907046095ab54aa83a6092951b4bbb/jersey-common-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.ext/jersey-entity-filtering/2.25.1/4a5805060f796ec2c9bb1ba0ce91c1db6d889524/jersey-entity-filtering-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/javax.ws.rs/javax.ws.rs-api/2.0.1/104e9c2b5583cfcfeac0402316221648d6d8ea6b/javax.ws.rs-api-2.0.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/javax.annotation/javax.annotation-api/1.2/479c1e06db31c432330183f5cae684163f186146/javax.annotation-api-1.2.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-core/2.5.0-b32/8cb6a8a9522ec523b7740d29f555bdbe9d936af2/hk2-core-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-runlevel/2.5.0-b32/60dc979763ea885e796cba4d3e322af8d500ba74/hk2-runlevel-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-locator/2.5.0-b32/195474f8ad0a8d130e9ea949a771bcf1215fc33b/hk2-locator-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-api/2.5.0-b32/6a576c9653832ce610b80a2f389374ef19d96171/hk2-api-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/javax.inject/2.5.0-b32/b2fa50c8186a38728c35fe6a9da57ce4cc806923/javax.inject-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.0.3/20738122b53399036c321eeb84687367757d622a/kotlin-stdlib-1.0.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-classic/1.1.11/ccedfbacef4a6515d2983e3f89ed753d5d4fb665/logback-classic-1.1.11.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.slf4j/jcl-over-slf4j/1.7.24/e6a8629079856a2aa7862c6327ccf6dd1988d7fc/jcl-over-slf4j-1.7.24.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.slf4j/jul-to-slf4j/1.7.24/25a2be668cb2ad1d05d76c0773df73b4b53617fd/jul-to-slf4j-1.7.24.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.slf4j/log4j-over-slf4j/1.7.24/6ab46c51a3848286a0db3ba7b22037b3834c3c44/log4j-over-slf4j-1.7.24.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.bundles.repackaged/jersey-guava/2.25.1/a2bb4f8208e134cf2cf71dfb8824e42942f7bd06/jersey-guava-2.25.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/osgi-resource-locator/1.0.1/4ed2b2d4738aed5786cfa64cba5a332779c4c708/osgi-resource-locator-1.0.1.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/hk2-utils/2.5.0-b32/5108a926988c4ceda7f1e681dddfe3101454a002/hk2-utils-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/aopalliance-repackaged/2.5.0-b32/6af37c3f8ec6f9e9653ec837eb508da28ce443cd/aopalliance-repackaged-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.21.0-GA/598244f595db5c5fb713731eddbb1c91a58d959b/javassist-3.21.0-GA.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2/class-model/2.5.0-b32/17f054f3e91898c0c0fc52163ad904b13c24e8b/class-model-2.5.0-b32.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-runtime/1.0.3/10f40d016700cf4287e49fa1d51c2a8507e9b946/kotlin-runtime-1.0.3.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/ch.qos.logback/logback-core/1.1.11/88b8df40340eed549fb07e2613879bf6b006704d/logback-core-1.1.11.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.24/3f6b4bd4f8dbe8d4bea06d107a3826469b85c3e9/slf4j-api-1.7.24.jar:/home/ivark/.gradle/caches/modules-2/files-2.1/org.glassfish.hk2.external/asm-all-repackaged/2.5.0-b32/dc705f1d54cd5a96cbc5a473525e75ef1cb59a9e/asm-all-repackaged-2.5.0-b32.jar ivark.diycomputer.model.Computer
NON-BUS-IO signals:
--------------------
Active LOW:
===========
PC.JMP.COND.0 (active LOW)
PC.JMP.COND.1 (active LOW)
PC.JMP.COND.2 (active LOW)
PC.JMP.COND.3 (active LOW)
PC.RESET (active LOW)
MUX.selectStackPointer (active LOW)
MAR.LOADHIGH (active LOW)
MAR.LOADLOW (active LOW)
INSTREG.CONT (active LOW)
ALU.OP0 (active LOW)
ALU.OP1 (active LOW)
ALU.FLR (active LOW)
SP.CNT (active LOW)
SP.DIRDOWN (active LOW)
SP.RESET (active LOW)

Active HIGH:
===========
PC.CNT (active HIGH)
MUXHAT.PC_OUT_LOW (active HIGH)
MAR.INC (active HIGH)
ALU.INVB (active HIGH)
ALU.CS (active HIGH)
ALU.CC (active HIGH)
ALU.FLAGW (active HIGH)
CLK.A.RESET (active HIGH)


RAM Write check:
Multiple ram writes: JSR@110
Multiple ram writes: JSR@111
Instruction set:
-----------------
Instruction #00 (0)
Instruction: NOP (No operation)
Pattern    : NOP
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT, INSTREG.CONT
2	INSTREG.CONT


Instruction #01 (1)
Instruction: LDX (X := arg)
Pattern    : LDX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> X_IN]	PC.CNT, INSTREG.CONT
3	INSTREG.CONT


Instruction #02 (2)
Instruction: LDX (X := ram(arg))
Pattern    : LDX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> X_IN]	INSTREG.CONT


Instruction #03 (3)
Instruction: STX (X -> ram(arg))
Pattern    : STX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> RAM_IN]	INSTREG.CONT


Instruction #04 (4)
Instruction: ADDX (X := X + arg)
Pattern    : ADDX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	MAR.INC, PC.CNT
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #05 (5)
Instruction: SUBX (X := X + arg)
Pattern    : SUBX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	MAR.INC, PC.CNT
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #06 (6)
Instruction: CMPX (flags := cmp(X,arg))
Pattern    : CMPX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	ALU.CS, MAR.INC, PC.CNT
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #07 (7)
Instruction: ADDX (X := X + ram(arg))
Pattern    : ADDX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #08 (8)
Instruction: SUBX (X := X - ram(arg))
Pattern    : SUBX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #09 (9)
Instruction: CMPX (flags := cmp(X,ram(arg)))
Pattern    : CMPX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]	ALU.CS
7	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #0a (10)
Instruction: ANDX (X := X AND arg)
Pattern    : ANDX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> X_IN]	ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #0b (11)
Instruction: ORX (X := X OR arg)
Pattern    : ORX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> X_IN]	ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #0c (12)
Instruction: XORX (X := X XOR arg)
Pattern    : XORX #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> X_IN]	ALU.OP1, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #0d (13)
Instruction: ANDX (X := X AND ram(arg))
Pattern    : ANDX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> X_IN]	ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #0e (14)
Instruction: ORX (X := X OR ram(arg))
Pattern    : ORX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> X_IN]	ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #0f (15)
Instruction: XORX (X := X XOR ram(arg))
Pattern    : XORX \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[X_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> X_IN]	ALU.OP1, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #10 (16)
Instruction: ROLX (X := ROL(X))
Pattern    : ROLX
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #11 (17)
Instruction: RORX (X := ROR(X))
Pattern    : RORX
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_B_IN]
3	BUS[ALU_OUT --> X_IN]	ALU.FLAGW, INSTREG.CONT
4	INSTREG.CONT


Instruction #12 (18)
Instruction: NOTX (X := NOT(X))
Pattern    : NOTX
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #13 (19)
Instruction: INCX (X := X + 1 )
Pattern    : INC X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_B_IN]
3	BUS[X_OUT --> ALU_A_IN]	ALU.CS
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #14 (20)
Instruction: DECX (X := X - 1 )
Pattern    : DEC X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_B_IN]
3	BUS[X_OUT --> ALU_A_IN]	ALU.CC
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #15 (21)
Instruction: ADDXY (X := X ADD Y)
Pattern    : ADDX Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #16 (22)
Instruction: SUBXY (X := X SUB Y)
Pattern    : SUBX Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT, ALU.INVB
5	INSTREG.CONT


Instruction #17 (23)
Instruction: ANDXY (X := X AND Y)
Pattern    : ANDX Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #18 (24)
Instruction: ORXY (X := X OR Y)
Pattern    : ORX Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #19 (25)
Instruction: XORXY (X := X XOR Y)
Pattern    : XORX Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #1a (26)
Instruction: ADDXZ (X := X ADD Z)
Pattern    : ADDX Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #1b (27)
Instruction: SUBXZ (X := X SUB Z)
Pattern    : SUBX Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT, ALU.INVB
5	INSTREG.CONT


Instruction #1c (28)
Instruction: ANDXZ (X := X AND Z)
Pattern    : ANDX Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #1d (29)
Instruction: ORXZ (X := X OR Z)
Pattern    : ORX Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #1e (30)
Instruction: XORXZ (X := X XOR Z)
Pattern    : XORX Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> X_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #1f (31)
Instruction: LDY (Y := arg)
Pattern    : LDY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> Y_IN]	PC.CNT, INSTREG.CONT
3	INSTREG.CONT


Instruction #20 (32)
Instruction: LDY (Y := ram(arg))
Pattern    : LDY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> Y_IN]	INSTREG.CONT


Instruction #21 (33)
Instruction: STY (Y -> ram(arg))
Pattern    : STY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> RAM_IN]	INSTREG.CONT


Instruction #22 (34)
Instruction: ADDY (Y := Y + arg)
Pattern    : ADDY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	MAR.INC, PC.CNT
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #23 (35)
Instruction: SUBY (Y := Y + arg)
Pattern    : SUBY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	MAR.INC, PC.CNT
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #24 (36)
Instruction: CMPY (flags := cmp(Y,arg))
Pattern    : CMPY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	ALU.CS, MAR.INC, PC.CNT
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #25 (37)
Instruction: ADDY (Y := Y + ram(arg))
Pattern    : ADDY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #26 (38)
Instruction: SUBY (Y := Y - ram(arg))
Pattern    : SUBY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #27 (39)
Instruction: CMPY (flags := cmp(Y,ram(arg)))
Pattern    : CMPY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]	ALU.CS
7	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #28 (40)
Instruction: ANDY (Y := Y AND arg)
Pattern    : ANDY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> Y_IN]	ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #29 (41)
Instruction: ORY (Y := Y OR arg)
Pattern    : ORY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> Y_IN]	ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #2a (42)
Instruction: XORY (Y := Y XOR arg)
Pattern    : XORY #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> Y_IN]	ALU.OP1, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #2b (43)
Instruction: ANDY (Y := Y AND ram(arg))
Pattern    : ANDY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Y_IN]	ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #2c (44)
Instruction: ORY (Y := Y OR ram(arg))
Pattern    : ORY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Y_IN]	ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #2d (45)
Instruction: XORY (Y := Y XOR ram(arg))
Pattern    : XORY \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Y_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Y_IN]	ALU.OP1, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #2e (46)
Instruction: ROLY (Y := ROL(Y))
Pattern    : ROLY
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #2f (47)
Instruction: RORY (Y := ROR(Y))
Pattern    : RORY
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_B_IN]
3	BUS[ALU_OUT --> Y_IN]	ALU.FLAGW, INSTREG.CONT
4	INSTREG.CONT


Instruction #30 (48)
Instruction: NOTY (Y := NOT(Y))
Pattern    : NOTY
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #31 (49)
Instruction: INCY (Y := Y + 1 )
Pattern    : INC Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_B_IN]
3	BUS[Y_OUT --> ALU_A_IN]	ALU.CS
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #32 (50)
Instruction: DECY (Y := Y - 1 )
Pattern    : DEC Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_B_IN]
3	BUS[Y_OUT --> ALU_A_IN]	ALU.CC
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #33 (51)
Instruction: ADDYX (Y := Y ADD X)
Pattern    : ADDY X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #34 (52)
Instruction: SUBYX (Y := Y SUB X)
Pattern    : SUBY X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT, ALU.INVB
5	INSTREG.CONT


Instruction #35 (53)
Instruction: ANDYX (Y := Y AND X)
Pattern    : ANDY X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #36 (54)
Instruction: ORYX (Y := Y OR X)
Pattern    : ORY X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #37 (55)
Instruction: XORYX (Y := Y XOR X)
Pattern    : XORY X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #38 (56)
Instruction: ADDYZ (Y := Y ADD Z)
Pattern    : ADDY Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #39 (57)
Instruction: SUBYZ (Y := Y SUB Z)
Pattern    : SUBY Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT, ALU.INVB
5	INSTREG.CONT


Instruction #3a (58)
Instruction: ANDYZ (Y := Y AND Z)
Pattern    : ANDY Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #3b (59)
Instruction: ORYZ (Y := Y OR Z)
Pattern    : ORY Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #3c (60)
Instruction: XORYZ (Y := Y XOR Z)
Pattern    : XORY Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Y_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #3d (61)
Instruction: LDZ (Z := arg)
Pattern    : LDZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> Z_IN]	PC.CNT, INSTREG.CONT
3	INSTREG.CONT


Instruction #3e (62)
Instruction: LDZ (Z := ram(arg))
Pattern    : LDZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> Z_IN]	INSTREG.CONT


Instruction #3f (63)
Instruction: STZ (Z -> ram(arg))
Pattern    : STZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> RAM_IN]	INSTREG.CONT


Instruction #40 (64)
Instruction: ADDZ (Z := Z + arg)
Pattern    : ADDZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	MAR.INC, PC.CNT
4	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #41 (65)
Instruction: SUBZ (Z := Z + arg)
Pattern    : SUBZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	MAR.INC, PC.CNT
4	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #42 (66)
Instruction: CMPZ (flags := cmp(Z,arg))
Pattern    : CMPZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	ALU.CS, MAR.INC, PC.CNT
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #43 (67)
Instruction: ADDZ (Z := Z + ram(arg))
Pattern    : ADDZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #44 (68)
Instruction: SUBZ (Z := Z - ram(arg))
Pattern    : SUBZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #45 (69)
Instruction: CMPZ (flags := cmp(Z,ram(arg)))
Pattern    : CMPZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]	ALU.CS
7	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #46 (70)
Instruction: ANDZ (Z := Z AND arg)
Pattern    : ANDZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> Z_IN]	ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #47 (71)
Instruction: ORZ (Z := Z OR arg)
Pattern    : ORZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> Z_IN]	ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #48 (72)
Instruction: XORZ (Z := Z XOR arg)
Pattern    : XORZ #(..)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[RAM_OUT --> ALU_B_IN]	PC.CNT
4	BUS[ALU_OUT --> Z_IN]	ALU.OP1, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #49 (73)
Instruction: ANDZ (Z := Z AND ram(arg))
Pattern    : ANDZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Z_IN]	ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #4a (74)
Instruction: ORZ (Z := Z OR ram(arg))
Pattern    : ORZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Z_IN]	ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #4b (75)
Instruction: XORZ (Z := Z XOR ram(arg))
Pattern    : XORZ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[Z_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> Z_IN]	ALU.OP1, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #4c (76)
Instruction: ROLZ (Z := ROL(Z))
Pattern    : ROLZ
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #4d (77)
Instruction: RORZ (Z := ROR(Z))
Pattern    : RORZ
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_B_IN]
3	BUS[ALU_OUT --> Z_IN]	ALU.FLAGW, INSTREG.CONT
4	INSTREG.CONT


Instruction #4e (78)
Instruction: NOTZ (Z := NOT(Z))
Pattern    : NOTZ
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]
4	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #4f (79)
Instruction: INCZ (Z := Z + 1 )
Pattern    : INC Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_B_IN]
3	BUS[Z_OUT --> ALU_A_IN]	ALU.CS
4	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #50 (80)
Instruction: DECZ (Z := Z - 1 )
Pattern    : DEC Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> ALU_B_IN]
3	BUS[Z_OUT --> ALU_A_IN]	ALU.CC
4	BUS[ALU_OUT --> Z_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #51 (81)
Instruction: CMPX (flags := cmp(X,Y))
Pattern    : CMPX,Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]	ALU.CS
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #52 (82)
Instruction: CMPX (flags := cmp(X,Z))
Pattern    : CMPX,Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]	ALU.CS
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #53 (83)
Instruction: CMPY (flags := cmp(Y,X))
Pattern    : CMPY,X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]	ALU.CS
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #54 (84)
Instruction: CMPY (flags := cmp(Y,Z))
Pattern    : CMPY,Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> ALU_A_IN]
3	BUS[Z_OUT --> ALU_B_IN]	ALU.CS
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #55 (85)
Instruction: CMPZ (flags := cmp(Z,X))
Pattern    : CMPZ,X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[X_OUT --> ALU_B_IN]	ALU.CS
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #56 (86)
Instruction: CMPZ (flags := cmp(Z,Y))
Pattern    : CMPZ,Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Z_OUT --> ALU_A_IN]
3	BUS[Y_OUT --> ALU_B_IN]	ALU.CS
4	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
5	INSTREG.CONT


Instruction #57 (87)
Instruction: ROL (ram(arg):=ROL(ram(arg)))
Pattern    : ROL \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]
7	BUS[ALU_OUT --> RAM_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #58 (88)
Instruction: ROR (ram(arg):=ROR(ram(arg)))
Pattern    : ROR \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> ALU_B_IN]
6	BUS[ALU_OUT --> RAM_IN]	ALU.FLAGW, INSTREG.CONT
7	INSTREG.CONT


Instruction #59 (89)
Instruction: NOT (ram(arg):=NOT(ram(arg)))
Pattern    : NOT \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[ZEROS --> ALU_A_IN]
6	BUS[RAM_OUT --> ALU_B_IN]	ALU.CC
7	BUS[ALU_OUT --> RAM_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #5a (90)
Instruction: INC (ram(arg):=INC(ram(arg)))
Pattern    : INC \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[ZEROS --> ALU_B_IN]
6	BUS[RAM_OUT --> ALU_A_IN]	ALU.CS
7	BUS[ALU_OUT --> RAM_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #5b (91)
Instruction: DEC (ram(arg):=DEC(ram(arg)))
Pattern    : DEC \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[ZEROS --> ALU_B_IN]
6	BUS[RAM_OUT --> ALU_A_IN]	ALU.CC
7	BUS[ALU_OUT --> RAM_IN]	ALU.FLR, ALU.OP1, ALU.OP0, ALU.INVB, ALU.FLAGW, INSTREG.CONT
8	INSTREG.CONT


Instruction #5c (92)
Instruction: SEC (flags.c=true)
Pattern    : SEC
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	ALU.CS, INSTREG.CONT
3	INSTREG.CONT


Instruction #5d (93)
Instruction: CLC (flags.c=false)
Pattern    : CLC
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	ALU.CC, INSTREG.CONT
3	INSTREG.CONT


Instruction #5e (94)
Instruction: JMP (if (true) pc=arg)
Pattern    : JMP \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #5f (95)
Instruction: BEQ (if (z==1) pc=arg)
Pattern    : BEQ \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, INSTREG.CONT
5	INSTREG.CONT


Instruction #60 (96)
Instruction: BNE (if (z==0) pc=arg)
Pattern    : BNE \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.1, INSTREG.CONT
5	INSTREG.CONT


Instruction #61 (97)
Instruction: BCS (if (c==1) pc=arg)
Pattern    : BCS \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.1, INSTREG.CONT
5	INSTREG.CONT


Instruction #62 (98)
Instruction: BCC (if (c==0) pc=arg)
Pattern    : BCC \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.2, INSTREG.CONT
5	INSTREG.CONT


Instruction #63 (99)
Instruction: BMI (if (n==1) pc=arg)
Pattern    : BMI \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.2, INSTREG.CONT
5	INSTREG.CONT


Instruction #64 (100)
Instruction: BPL (if (n==0) pc=arg)
Pattern    : BPL \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.1, PC.JMP.COND.2, INSTREG.CONT
5	INSTREG.CONT


Instruction #65 (101)
Instruction: BVS (if (v==1) pc=arg)
Pattern    : BVS \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, INSTREG.CONT
5	INSTREG.CONT


Instruction #66 (102)
Instruction: BVC (if (v==0) pc=arg)
Pattern    : BVC \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #67 (103)
Instruction: BHI (if (c==1 && z==0) pc=arg)
Pattern    : BHI \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #68 (104)
Instruction: BLS (if (c==0 | z==1) pc=arg)
Pattern    : BLS \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.1, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #69 (105)
Instruction: BGE (if (n==v) pc=arg)
Pattern    : BGE \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #6a (106)
Instruction: BLT (if (n!=v) pc=arg)
Pattern    : BLT \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #6b (107)
Instruction: BGT (if (z==0 && n==v) pc=arg)
Pattern    : BGT \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.0, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #6c (108)
Instruction: BLE (if (z==1 | n!=v) pc=arg)
Pattern    : BLE \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT
4	PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
5	INSTREG.CONT


Instruction #6d (109)
Instruction: JMP (pc=ram(arg))
Pattern    : JMP \(\$(....)\)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> PC_JMP_H_IN]	MAR.INC
6	BUS[RAM_OUT --> PC_JMP_L_IN]
7	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
8	INSTREG.CONT


Instruction #6e (110)
Instruction: JSR (if (cond) pc=address, push returnaddress)
Pattern    : JSR \$(....)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC, SP.CNT, SP.DIRDOWN
3	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT, SP.CNT, SP.DIRDOWN
4	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer
5	BUS[PC_OUT --> RAM_IN]	MAR.INC
6	BUS[PC_OUT --> RAM_IN]	MUXHAT.PC_OUT_LOW
7	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
8	INSTREG.CONT


Instruction #6f (111)
Instruction: JSR (if (cond) pc=ram($address), push returnaddress)
Pattern    : JSR \(\$(....)\)
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[RAM_OUT --> TMP_IN]	MAR.INC, PC.CNT
3	BUS[RAM_OUT --> NO_INPUT]	MAR.LOADLOW, PC.CNT
4	BUS[TMP_OUT --> NO_INPUT]	MAR.LOADHIGH
5	BUS[RAM_OUT --> PC_JMP_H_IN]	PC.CNT, MAR.INC, SP.CNT, SP.DIRDOWN
6	BUS[RAM_OUT --> PC_JMP_L_IN]	PC.CNT, SP.CNT, SP.DIRDOWN
7	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer
8	BUS[PC_OUT --> RAM_IN]	MAR.INC
9	BUS[PC_OUT --> RAM_IN]	MUXHAT.PC_OUT_LOW
10	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
11	INSTREG.CONT


Instruction #70 (112)
Instruction: RTS (pc=pop())
Pattern    : RTS
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer
3	BUS[RAM_OUT --> PC_JMP_H_IN]	MAR.INC, SP.CNT
4	BUS[RAM_OUT --> PC_JMP_L_IN]	SP.CNT
5	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3, INSTREG.CONT
6	INSTREG.CONT


Instruction #71 (113)
Instruction: PUSHX (push(X))
Pattern    : PUSH X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	SP.CNT, SP.DIRDOWN
3	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer
4	BUS[X_OUT --> RAM_IN]	INSTREG.CONT


Instruction #72 (114)
Instruction: POPX (X=pop())
Pattern    : POP X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer, SP.CNT
3	BUS[RAM_OUT --> X_IN]	INSTREG.CONT


Instruction #73 (115)
Instruction: PUSHY (push(Y))
Pattern    : PUSH Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	SP.CNT, SP.DIRDOWN
3	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer
4	BUS[Y_OUT --> RAM_IN]	INSTREG.CONT


Instruction #74 (116)
Instruction: POPY (Y=pop())
Pattern    : POP Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer, SP.CNT
3	BUS[RAM_OUT --> Y_IN]	INSTREG.CONT


Instruction #75 (117)
Instruction: PUSHZ (push(Z))
Pattern    : PUSH Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	SP.CNT, SP.DIRDOWN
3	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer
4	BUS[Z_OUT --> RAM_IN]	INSTREG.CONT


Instruction #76 (118)
Instruction: POPZ (Z=pop())
Pattern    : POP Z
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	MAR.LOADHIGH, MAR.LOADLOW, MUX.selectStackPointer, SP.CNT
3	BUS[RAM_OUT --> Z_IN]	INSTREG.CONT


Instruction #77 (119)
Instruction: HLT (halt)
Pattern    : HLT
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	CLK.A.RESET, INSTREG.CONT
3	INSTREG.CONT


Instruction #78 (120)
Instruction: OUT0 (out#0 := X)
Pattern    : OUT0 X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> OUTPUT_0_IN]	INSTREG.CONT


Instruction #79 (121)
Instruction: OUT1 (out#1 := X)
Pattern    : OUT1 X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> OUTPUT_1_IN]	INSTREG.CONT


Instruction #7a (122)
Instruction: OUT2 (out#2 := X)
Pattern    : OUT2 X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[X_OUT --> OUTPUT_2_IN]	INSTREG.CONT


Instruction #7b (123)
Instruction: OUT0 (out#0 := Y)
Pattern    : OUT0 Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> OUTPUT_0_IN]	INSTREG.CONT


Instruction #7c (124)
Instruction: OUT1 (out#1 := Y)
Pattern    : OUT1 Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> OUTPUT_1_IN]	INSTREG.CONT


Instruction #7d (125)
Instruction: OUT2 (out#2 := Y)
Pattern    : OUT2 Y
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[Y_OUT --> OUTPUT_2_IN]	INSTREG.CONT


Instruction #7e (126)
Instruction: IN0 (X := in#0)
Pattern    : IN0 X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[INPUT_0_OUT --> X_IN]	INSTREG.CONT


Instruction #7f (127)
Instruction: IN1 (X := in#1)
Pattern    : IN1 X
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[INPUT_1_OUT --> X_IN]	INSTREG.CONT


Instruction #80 (128)
Instruction: RAMLOAD (RAMLOAD)
Pattern    : RAMLOAD
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> NO_INPUT]	MAR.LOADHIGH
3	BUS[ZEROS --> NO_INPUT]	MAR.LOADLOW
4	MAR.INC
5	BUS[ZEROS --> RAM_IN]
6	SP.RESET
7	INSTREG.CONT


Instruction #81 (129)
Instruction: RESETPC (RESETPC)
Pattern    : RESETPC
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	BUS[ZEROS --> TMP_IN]
3	BUS[TMP_OUT --> PC_JMP_H_IN]
4	BUS[TMP_OUT --> PC_JMP_L_IN]
5	PC.JMP.COND.0, PC.JMP.COND.1, PC.JMP.COND.2, PC.JMP.COND.3
6	INSTREG.CONT


Instruction #82 (130)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #83 (131)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #84 (132)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #85 (133)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #86 (134)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #87 (135)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #88 (136)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #89 (137)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #8a (138)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #8b (139)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #8c (140)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #8d (141)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #8e (142)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #8f (143)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #90 (144)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #91 (145)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #92 (146)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #93 (147)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #94 (148)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #95 (149)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #96 (150)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #97 (151)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #98 (152)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #99 (153)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #9a (154)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #9b (155)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #9c (156)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #9d (157)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #9e (158)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #9f (159)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a0 (160)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a1 (161)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a2 (162)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a3 (163)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a4 (164)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a5 (165)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a6 (166)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a7 (167)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a8 (168)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #a9 (169)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #aa (170)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ab (171)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ac (172)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ad (173)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ae (174)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #af (175)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b0 (176)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b1 (177)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b2 (178)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b3 (179)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b4 (180)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b5 (181)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b6 (182)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b7 (183)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b8 (184)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #b9 (185)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ba (186)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #bb (187)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #bc (188)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #bd (189)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #be (190)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #bf (191)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c0 (192)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c1 (193)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c2 (194)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c3 (195)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c4 (196)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c5 (197)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c6 (198)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c7 (199)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c8 (200)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #c9 (201)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ca (202)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #cb (203)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #cc (204)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #cd (205)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ce (206)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #cf (207)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d0 (208)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d1 (209)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d2 (210)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d3 (211)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d4 (212)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d5 (213)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d6 (214)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d7 (215)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d8 (216)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #d9 (217)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #da (218)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #db (219)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #dc (220)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #dd (221)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #de (222)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #df (223)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e0 (224)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e1 (225)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e2 (226)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e3 (227)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e4 (228)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e5 (229)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e6 (230)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e7 (231)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e8 (232)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #e9 (233)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ea (234)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #eb (235)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ec (236)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ed (237)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ee (238)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ef (239)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f0 (240)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f1 (241)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f2 (242)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f3 (243)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f4 (244)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f5 (245)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f6 (246)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f7 (247)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f8 (248)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #f9 (249)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #fa (250)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #fb (251)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #fc (252)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #fd (253)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #fe (254)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT


Instruction #ff (255)
Instruction: dummy (dummy)
Pattern    : dummy
Microcode steps:
0	BUS[ZEROS --> MAR_OFFSET_IN]	MAR.LOADHIGH, MAR.LOADLOW
1	BUS[RAM_OUT --> INSTREG_IN]	MAR.INC, PC.CNT
2	INSTREG.CONT






Instruction set summary:
-------------------------
0= #00		NOP		No operation		16
1= #01		LDX #(..)		X := arg		16
2= #02		LDX \$(....)		X := ram(arg)		16
3= #03		STX \$(....)		X -> ram(arg)		16
4= #04		ADDX #(..)		X := X + arg		16
5= #05		SUBX #(..)		X := X + arg		16
6= #06		CMPX #(..)		flags := cmp(X,arg)		16
7= #07		ADDX \$(....)		X := X + ram(arg)		16
8= #08		SUBX \$(....)		X := X - ram(arg)		16
9= #09		CMPX \$(....)		flags := cmp(X,ram(arg))		16
10= #0a		ANDX #(..)		X := X AND arg		16
11= #0b		ORX #(..)		X := X OR arg		16
12= #0c		XORX #(..)		X := X XOR arg		16
13= #0d		ANDX \$(....)		X := X AND ram(arg)		16
14= #0e		ORX \$(....)		X := X OR ram(arg)		16
15= #0f		XORX \$(....)		X := X XOR ram(arg)		16
16= #10		ROLX		X := ROL(X)		16
17= #11		RORX		X := ROR(X)		16
18= #12		NOTX		X := NOT(X)		16
19= #13		INC X		X := X + 1 		16
20= #14		DEC X		X := X - 1 		16
21= #15		ADDX Y		X := X ADD Y		16
22= #16		SUBX Y		X := X SUB Y		16
23= #17		ANDX Y		X := X AND Y		16
24= #18		ORX Y		X := X OR Y		16
25= #19		XORX Y		X := X XOR Y		16
26= #1a		ADDX Z		X := X ADD Z		16
27= #1b		SUBX Z		X := X SUB Z		16
28= #1c		ANDX Z		X := X AND Z		16
29= #1d		ORX Z		X := X OR Z		16
30= #1e		XORX Z		X := X XOR Z		16
31= #1f		LDY #(..)		Y := arg		16
32= #20		LDY \$(....)		Y := ram(arg)		16
33= #21		STY \$(....)		Y -> ram(arg)		16
34= #22		ADDY #(..)		Y := Y + arg		16
35= #23		SUBY #(..)		Y := Y + arg		16
36= #24		CMPY #(..)		flags := cmp(Y,arg)		16
37= #25		ADDY \$(....)		Y := Y + ram(arg)		16
38= #26		SUBY \$(....)		Y := Y - ram(arg)		16
39= #27		CMPY \$(....)		flags := cmp(Y,ram(arg))		16
40= #28		ANDY #(..)		Y := Y AND arg		16
41= #29		ORY #(..)		Y := Y OR arg		16
42= #2a		XORY #(..)		Y := Y XOR arg		16
43= #2b		ANDY \$(....)		Y := Y AND ram(arg)		16
44= #2c		ORY \$(....)		Y := Y OR ram(arg)		16
45= #2d		XORY \$(....)		Y := Y XOR ram(arg)		16
46= #2e		ROLY		Y := ROL(Y)		16
47= #2f		RORY		Y := ROR(Y)		16
48= #30		NOTY		Y := NOT(Y)		16
49= #31		INC Y		Y := Y + 1 		16
50= #32		DEC Y		Y := Y - 1 		16
51= #33		ADDY X		Y := Y ADD X		16
52= #34		SUBY X		Y := Y SUB X		16
53= #35		ANDY X		Y := Y AND X		16
54= #36		ORY X		Y := Y OR X		16
55= #37		XORY X		Y := Y XOR X		16
56= #38		ADDY Z		Y := Y ADD Z		16
57= #39		SUBY Z		Y := Y SUB Z		16
58= #3a		ANDY Z		Y := Y AND Z		16
59= #3b		ORY Z		Y := Y OR Z		16
60= #3c		XORY Z		Y := Y XOR Z		16
61= #3d		LDZ #(..)		Z := arg		16
62= #3e		LDZ \$(....)		Z := ram(arg)		16
63= #3f		STZ \$(....)		Z -> ram(arg)		16
64= #40		ADDZ #(..)		Z := Z + arg		16
65= #41		SUBZ #(..)		Z := Z + arg		16
66= #42		CMPZ #(..)		flags := cmp(Z,arg)		16
67= #43		ADDZ \$(....)		Z := Z + ram(arg)		16
68= #44		SUBZ \$(....)		Z := Z - ram(arg)		16
69= #45		CMPZ \$(....)		flags := cmp(Z,ram(arg))		16
70= #46		ANDZ #(..)		Z := Z AND arg		16
71= #47		ORZ #(..)		Z := Z OR arg		16
72= #48		XORZ #(..)		Z := Z XOR arg		16
73= #49		ANDZ \$(....)		Z := Z AND ram(arg)		16
74= #4a		ORZ \$(....)		Z := Z OR ram(arg)		16
75= #4b		XORZ \$(....)		Z := Z XOR ram(arg)		16
76= #4c		ROLZ		Z := ROL(Z)		16
77= #4d		RORZ		Z := ROR(Z)		16
78= #4e		NOTZ		Z := NOT(Z)		16
79= #4f		INC Z		Z := Z + 1 		16
80= #50		DEC Z		Z := Z - 1 		16
81= #51		CMPX,Y		flags := cmp(X,Y)		16
82= #52		CMPX,Z		flags := cmp(X,Z)		16
83= #53		CMPY,X		flags := cmp(Y,X)		16
84= #54		CMPY,Z		flags := cmp(Y,Z)		16
85= #55		CMPZ,X		flags := cmp(Z,X)		16
86= #56		CMPZ,Y		flags := cmp(Z,Y)		16
87= #57		ROL \$(....)		ram(arg):=ROL(ram(arg))		16
88= #58		ROR \$(....)		ram(arg):=ROR(ram(arg))		16
89= #59		NOT \$(....)		ram(arg):=NOT(ram(arg))		16
90= #5a		INC \$(....)		ram(arg):=INC(ram(arg))		16
91= #5b		DEC \$(....)		ram(arg):=DEC(ram(arg))		16
92= #5c		SEC		flags.c=true		16
93= #5d		CLC		flags.c=false		16
94= #5e		JMP \$(....)		if (true) pc=arg		16
95= #5f		BEQ \$(....)		if (z==1) pc=arg		16
96= #60		BNE \$(....)		if (z==0) pc=arg		16
97= #61		BCS \$(....)		if (c==1) pc=arg		16
98= #62		BCC \$(....)		if (c==0) pc=arg		16
99= #63		BMI \$(....)		if (n==1) pc=arg		16
100= #64		BPL \$(....)		if (n==0) pc=arg		16
101= #65		BVS \$(....)		if (v==1) pc=arg		16
102= #66		BVC \$(....)		if (v==0) pc=arg		16
103= #67		BHI \$(....)		if (c==1 && z==0) pc=arg		16
104= #68		BLS \$(....)		if (c==0 | z==1) pc=arg		16
105= #69		BGE \$(....)		if (n==v) pc=arg		16
106= #6a		BLT \$(....)		if (n!=v) pc=arg		16
107= #6b		BGT \$(....)		if (z==0 && n==v) pc=arg		16
108= #6c		BLE \$(....)		if (z==1 | n!=v) pc=arg		16
109= #6d		JMP \(\$(....)\)		pc=ram(arg)		16
110= #6e		JSR \$(....)		if (cond) pc=address, push returnaddress		16
111= #6f		JSR \(\$(....)\)		if (cond) pc=ram($address), push returnaddress		16
112= #70		RTS		pc=pop()		16
113= #71		PUSH X		push(X)		16
114= #72		POP X		X=pop()		16
115= #73		PUSH Y		push(Y)		16
116= #74		POP Y		Y=pop()		16
117= #75		PUSH Z		push(Z)		16
118= #76		POP Z		Z=pop()		16
119= #77		HLT		halt		16
120= #78		OUT0 X		out#0 := X		16
121= #79		OUT1 X		out#1 := X		16
122= #7a		OUT2 X		out#2 := X		16
123= #7b		OUT0 Y		out#0 := Y		16
124= #7c		OUT1 Y		out#1 := Y		16
125= #7d		OUT2 Y		out#2 := Y		16
126= #7e		IN0 X		X := in#0		16
127= #7f		IN1 X		X := in#1		16
128= #80		RAMLOAD		RAMLOAD		16
129= #81		RESETPC		RESETPC		16
130= #82		dummy		dummy		16
131= #83		dummy		dummy		16
132= #84		dummy		dummy		16
133= #85		dummy		dummy		16
134= #86		dummy		dummy		16
135= #87		dummy		dummy		16
136= #88		dummy		dummy		16
137= #89		dummy		dummy		16
138= #8a		dummy		dummy		16
139= #8b		dummy		dummy		16
140= #8c		dummy		dummy		16
141= #8d		dummy		dummy		16
142= #8e		dummy		dummy		16
143= #8f		dummy		dummy		16
144= #90		dummy		dummy		16
145= #91		dummy		dummy		16
146= #92		dummy		dummy		16
147= #93		dummy		dummy		16
148= #94		dummy		dummy		16
149= #95		dummy		dummy		16
150= #96		dummy		dummy		16
151= #97		dummy		dummy		16
152= #98		dummy		dummy		16
153= #99		dummy		dummy		16
154= #9a		dummy		dummy		16
155= #9b		dummy		dummy		16
156= #9c		dummy		dummy		16
157= #9d		dummy		dummy		16
158= #9e		dummy		dummy		16
159= #9f		dummy		dummy		16
160= #a0		dummy		dummy		16
161= #a1		dummy		dummy		16
162= #a2		dummy		dummy		16
163= #a3		dummy		dummy		16
164= #a4		dummy		dummy		16
165= #a5		dummy		dummy		16
166= #a6		dummy		dummy		16
167= #a7		dummy		dummy		16
168= #a8		dummy		dummy		16
169= #a9		dummy		dummy		16
170= #aa		dummy		dummy		16
171= #ab		dummy		dummy		16
172= #ac		dummy		dummy		16
173= #ad		dummy		dummy		16
174= #ae		dummy		dummy		16
175= #af		dummy		dummy		16
176= #b0		dummy		dummy		16
177= #b1		dummy		dummy		16
178= #b2		dummy		dummy		16
179= #b3		dummy		dummy		16
180= #b4		dummy		dummy		16
181= #b5		dummy		dummy		16
182= #b6		dummy		dummy		16
183= #b7		dummy		dummy		16
184= #b8		dummy		dummy		16
185= #b9		dummy		dummy		16
186= #ba		dummy		dummy		16
187= #bb		dummy		dummy		16
188= #bc		dummy		dummy		16
189= #bd		dummy		dummy		16
190= #be		dummy		dummy		16
191= #bf		dummy		dummy		16
192= #c0		dummy		dummy		16
193= #c1		dummy		dummy		16
194= #c2		dummy		dummy		16
195= #c3		dummy		dummy		16
196= #c4		dummy		dummy		16
197= #c5		dummy		dummy		16
198= #c6		dummy		dummy		16
199= #c7		dummy		dummy		16
200= #c8		dummy		dummy		16
201= #c9		dummy		dummy		16
202= #ca		dummy		dummy		16
203= #cb		dummy		dummy		16
204= #cc		dummy		dummy		16
205= #cd		dummy		dummy		16
206= #ce		dummy		dummy		16
207= #cf		dummy		dummy		16
208= #d0		dummy		dummy		16
209= #d1		dummy		dummy		16
210= #d2		dummy		dummy		16
211= #d3		dummy		dummy		16
212= #d4		dummy		dummy		16
213= #d5		dummy		dummy		16
214= #d6		dummy		dummy		16
215= #d7		dummy		dummy		16
216= #d8		dummy		dummy		16
217= #d9		dummy		dummy		16
218= #da		dummy		dummy		16
219= #db		dummy		dummy		16
220= #dc		dummy		dummy		16
221= #dd		dummy		dummy		16
222= #de		dummy		dummy		16
223= #df		dummy		dummy		16
224= #e0		dummy		dummy		16
225= #e1		dummy		dummy		16
226= #e2		dummy		dummy		16
227= #e3		dummy		dummy		16
228= #e4		dummy		dummy		16
229= #e5		dummy		dummy		16
230= #e6		dummy		dummy		16
231= #e7		dummy		dummy		16
232= #e8		dummy		dummy		16
233= #e9		dummy		dummy		16
234= #ea		dummy		dummy		16
235= #eb		dummy		dummy		16
236= #ec		dummy		dummy		16
237= #ed		dummy		dummy		16
238= #ee		dummy		dummy		16
239= #ef		dummy		dummy		16
240= #f0		dummy		dummy		16
241= #f1		dummy		dummy		16
242= #f2		dummy		dummy		16
243= #f3		dummy		dummy		16
244= #f4		dummy		dummy		16
245= #f5		dummy		dummy		16
246= #f6		dummy		dummy		16
247= #f7		dummy		dummy		16
248= #f8		dummy		dummy		16
249= #f9		dummy		dummy		16
250= #fa		dummy		dummy		16
251= #fb		dummy		dummy		16
252= #fc		dummy		dummy		16
253= #fd		dummy		dummy		16
254= #fe		dummy		dummy		16
255= #ff		dummy		dummy		16


Process finished with exit code 0
